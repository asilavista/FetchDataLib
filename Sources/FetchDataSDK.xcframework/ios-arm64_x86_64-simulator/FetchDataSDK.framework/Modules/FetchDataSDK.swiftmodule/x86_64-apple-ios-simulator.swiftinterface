// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.0.3 effective-5.10 (swiftlang-6.0.3.1.10 clang-1600.0.30.1)
// swift-module-flags: -target x86_64-apple-ios18.2-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-bare-slash-regex -module-name FetchDataSDK
import Combine
@_exported import FetchDataSDK
import Swift
import SwiftUI
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
public enum FetchUserError : Swift.Error {
  case invalidResponse, invalidData, invalidURL, custom(any Swift.Error)
}
@_hasMissingDesignatedInitializers public class FetchUserViewModel : Combine.ObservableObject {
  @Combine.Published @_projectedValueProperty($result) public var result: Swift.Result<FetchDataSDK.User, FetchDataSDK.FetchUserError>? {
    get
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    set
    @available(iOS 13.0, tvOS 13.0, watchOS 6.0, macOS 10.15, *)
    _modify
  }
  public var $result: Combine.Published<Swift.Result<FetchDataSDK.User, FetchDataSDK.FetchUserError>?>.Publisher {
    get
    @available(iOS 14.0, tvOS 14.0, watchOS 7.0, macOS 11.0, *)
    set
  }
  public func fetchUser(name: Swift.String) async
  public typealias ObjectWillChangePublisher = Combine.ObservableObjectPublisher
  @objc deinit
}
public struct User : Swift.Decodable {
  public init(from decoder: any Swift.Decoder) throws
}
@_Concurrency.MainActor @preconcurrency public struct UserView : SwiftUICore.View {
  @_Concurrency.MainActor @preconcurrency public var body: some SwiftUICore.View {
    get
  }
  public typealias Body = @_opaqueReturnTypeOf("$s12FetchDataSDK8UserViewV4bodyQrvp", 0) __
}

extension FetchDataSDK.UserView : Swift.Sendable {}
